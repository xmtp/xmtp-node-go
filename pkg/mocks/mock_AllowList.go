// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	authz "github.com/xmtp/xmtp-node-go/pkg/authz"
)

// MockAllowList is an autogenerated mock type for the AllowList type
type MockAllowList struct {
	mock.Mock
}

type MockAllowList_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAllowList) EXPECT() *MockAllowList_Expecter {
	return &MockAllowList_Expecter{mock: &_m.Mock}
}

// GetPermission provides a mock function with given fields: ipAddress
func (_m *MockAllowList) GetPermission(ipAddress string) authz.Permission {
	ret := _m.Called(ipAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetPermission")
	}

	var r0 authz.Permission
	if rf, ok := ret.Get(0).(func(string) authz.Permission); ok {
		r0 = rf(ipAddress)
	} else {
		r0 = ret.Get(0).(authz.Permission)
	}

	return r0
}

// MockAllowList_GetPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermission'
type MockAllowList_GetPermission_Call struct {
	*mock.Call
}

// GetPermission is a helper method to define mock.On call
//   - ipAddress string
func (_e *MockAllowList_Expecter) GetPermission(ipAddress interface{}) *MockAllowList_GetPermission_Call {
	return &MockAllowList_GetPermission_Call{Call: _e.mock.On("GetPermission", ipAddress)}
}

func (_c *MockAllowList_GetPermission_Call) Run(run func(ipAddress string)) *MockAllowList_GetPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAllowList_GetPermission_Call) Return(_a0 authz.Permission) *MockAllowList_GetPermission_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAllowList_GetPermission_Call) RunAndReturn(run func(string) authz.Permission) *MockAllowList_GetPermission_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAllowList creates a new instance of MockAllowList. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAllowList(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAllowList {
	mock := &MockAllowList{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
